{
  "version": 1,
  "service": {
    "deployment": {
      "source": "https://github.com/mesg-foundation/service-ethereum/archive/master.tar.gz"
    },
    "definition": {
      "name": "Ethereum",
      "sid": "com.mesg.ethereum",
      "description": "Ethereum Service to interact with any Smart Contract",
      "configuration": {
        "env": [
          "PROVIDER_ENDPOINT=https://mainnet.infura.io/",
          "BLOCK_CONFIRMATIONS=4",
          "DEFAULT_GAS_LIMIT=1000000",
          "POLLING_TIME=1000"
        ]
      },
      "tasks": {
        "executeSmartContractMethod": {
          "name": "Execute a Smart Contract Method",
          "description": "This task executes a method on any Smart Contract",
          "inputs": {
            "methodAbi": {
              "name": "Method ABI",
              "description": "The ABI of the method to execute. Only pass the ABI of the method and NOT all the Smart Contract's ABI.",
              "type": "Any"
            },
            "inputs": {
              "name": "Inputs",
              "description": "The inputs to use during the execution of the method. Pass an Object with parameter's name as key and parameter's value as value.",
              "type": "Any"
            },
            "contractAddress": {
              "name": "Contract address",
              "description": "The address of the contract",
              "type": "String"
            },
            "privateKey": {
              "name": "Signer private key",
              "description": "The private key to sign the transaction",
              "type": "String"
            },
            "value": {
              "type": "String",
              "optional": true
            },
            "gasPrice": {
              "name": "Gas Price",
              "description": "The gas price in wei to use for this transaction",
              "type": "String",
              "optional": true
            },
            "gasLimit": {
              "name": "Gas Limit",
              "description": "The maximum gas provided for this transaction",
              "type": "Number",
              "optional": true
            }
          },
          "outputs": {
            "success": {
              "name": "Success",
              "description": "Output when the task executes successfully",
              "data": {
                "transactionHash": {
                  "name": "Transaction hash",
                  "description": "Hash of the transaction",
                  "type": "String"
                }
              }
            },
            "error": {
              "name": "Error",
              "description": "Output when an error occurs",
              "data": {
                "message": {
                  "name": "Message",
                  "description": "The error message",
                  "type": "String"
                }
              }
            }
          }
        },
        "callSmartContractMethod": {
          "name": "Call a Smart Contract Method",
          "description": "This task call a 'constant' method on any Smart Contract. It does not require fees.",
          "inputs": {
            "methodAbi": {
              "name": "Method ABI",
              "description": "The ABI of the method to execute. Only pass the ABI of the method and NOT all the Smart Contract's ABI.",
              "type": "Any"
            },
            "inputs": {
              "name": "Inputs",
              "description": "The inputs to use during the execution of the method. Pass an Object with parameter's name as key and parameter's value as value.",
              "type": "Any"
            },
            "contractAddress": {
              "name": "Contract address",
              "description": "The address of the contract",
              "type": "String"
            }
          },
          "outputs": {
            "success": {
              "name": "Success",
              "description": "Output when the task executes successfully",
              "data": {
                "outputs": {
                  "type": "Any"
                }
              }
            },
            "error": {
              "name": "Error",
              "description": "Output when an error occurs",
              "data": {
                "message": {
                  "name": "Message",
                  "description": "The error message",
                  "type": "String"
                }
              }
            }
          }
        },
        "decodeLog": {
          "inputs": {
            "abi": {
              "type": "Any"
            },
            "address": {
              "type": "String"
            },
            "data": {
              "type": "String"
            },
            "topics": {
              "type": "Any"
            },
            "logIndex": {
              "type": "Number"
            },
            "transactionHash": {
              "type": "String"
            },
            "transactionIndex": {
              "type": "Number"
            },
            "blockHash": {
              "type": "String"
            },
            "blockNumber": {
              "type": "Number"
            }
          },
          "outputs": {
            "success": {
              "data": {
                "decodedData": {
                  "type": "Any"
                },
                "address": {
                  "type": "String"
                },
                "data": {
                  "type": "String"
                },
                "topics": {
                  "type": "Any"
                },
                "logIndex": {
                  "type": "Number"
                },
                "transactionHash": {
                  "type": "String"
                },
                "transactionIndex": {
                  "type": "Number"
                },
                "blockHash": {
                  "type": "String"
                },
                "blockNumber": {
                  "type": "Number"
                }
              }
            },
            "error": {
              "name": "Error",
              "description": "Output when an error occurs",
              "data": {
                "message": {
                  "name": "Message",
                  "description": "The error message",
                  "type": "String"
                }
              }
            }
          }
        }
      },
      "events": {
        "log": {
          "data": {
            "address": {
              "type": "String"
            },
            "data": {
              "type": "String"
            },
            "topics": {
              "type": "Any"
            },
            "logIndex": {
              "type": "Number"
            },
            "transactionHash": {
              "type": "String"
            },
            "transactionIndex": {
              "type": "Number"
            },
            "blockHash": {
              "type": "String"
            },
            "blockNumber": {
              "type": "Number"
            }
          }
        },
        "block": {
          "data": {
            "number": {
              "type": "Number"
            },
            "hash": {
              "type": "String"
            },
            "parentHash": {
              "type": "String"
            },
            "sha3Uncles": {
              "type": "String"
            },
            "logsBloom": {
              "type": "String"
            },
            "stateRoot": {
              "type": "String"
            },
            "miner": {
              "type": "String"
            },
            "extraData": {
              "type": "String"
            },
            "gasLimit": {
              "type": "Number"
            },
            "gasUsed": {
              "type": "Number"
            },
            "timestamp": {
              "type": "Number"
            },
            "size": {
              "type": "Number"
            },
            "difficulty": {
              "type": "String"
            }
          }
        },
        "transaction": {
          "data": {
            "transactionHash": {
              "type": "String"
            },
            "transactionIndex": {
              "type": "Number"
            },
            "blockHash": {
              "type": "String"
            },
            "blockNumber": {
              "type": "Number"
            },
            "from": {
              "type": "String"
            },
            "to": {
              "type": "String"
            },
            "status": {
              "type": "Boolean"
            },
            "value": {
              "type": "String"
            },
            "gasPrice": {
              "type": "String"
            },
            "gas": {
              "type": "Number"
            },
            "gasUsed": {
              "type": "Number"
            },
            "input": {
              "type": "String"
            }
          }
        }
      }
    },
    "readme": "# Ethereum Service\r\n\r\n[Website](https://mesg.com/) - [Docs](https://docs.mesg.com/) - [Forum](https://forum.mesg.com) - [Blog](https://medium.com/mesg)\r\n\r\nEthereum Service to interact with any Smart Contract.\r\n\r\n# Contents\r\n\r\n- [Installation](#Installation)\r\n- [Definitions](#Definitions)\r\n  - [Events](#Events)\r\n    - [Block](#Block)\r\n    - [Log](#Log)\r\n    - [Transaction](#Transaction)\r\n  - [Tasks](#Tasks)\r\n    - [Call a Smart Contract Method](#Call-a-Smart-Contract-Method)\r\n    - [Decode Log](#Decode-Log)\r\n    - [Execute a Smart Contract Method](#Execute-a-Smart-Contract-Method)\r\n\r\n\r\n# Installation\r\n\r\n## MESG Core\r\n\r\nThis service requires [MESG Core](https://github.com/mesg-foundation/core) to be install.\r\n\r\nYou can install MESG Core by running the following command or [follow the install guide](https://docs.mesg.com/guide/start-here/installation.html).\r\n\r\n```bash\r\nbash <(curl -fsSL https://mesg.com/install)\r\n```\r\n\r\n## Infura\r\n\r\nThis service is using Infura as an Ethereum Provider. Infura requires application to use a `PROJECT_ID`. Please register at https://infura.io/register to get a `PROJECT_ID` and don't forget to replace it in the following `PROVIDER_ENDPOINT` URL.\r\n\r\n## Mainnet\r\n\r\nTo use the mainnet, deploy using the following endpoint:\r\n\r\n```\r\nmesg-core service deploy https://github.com/mesg-foundation/service-ethereum --env PROVIDER_ENDPOINT=https://mainnet.infura.io/v3/PROJECT_ID\r\n```\r\n\r\n## Ropsten (POW)\r\n\r\nTo use the ropsten testnet, deploy using the following endpoint:\r\n\r\n```\r\nmesg-core service deploy https://github.com/mesg-foundation/service-ethereum --env PROVIDER_ENDPOINT=https://ropsten.infura.io/v3/PROJECT_ID\r\n```\r\n\r\n## Rinkeby (POA)\r\n\r\nTo use the rinkeby testnet, deploy using the following endpoint:\r\n\r\n```\r\nmesg-core service deploy https://github.com/mesg-foundation/service-ethereum --env PROVIDER_ENDPOINT=https://rinkeby.infura.io/v3/PROJECT_ID --env BLOCK_CONFIRMATIONS=0\r\n```\r\n\r\nOn this testnet, the number of confirmation is set to 0 because of the Proof Of Authority consensus used by this network.\r\n\r\n## Kovan (POA)\r\n\r\nTo use the kovan testnet, deploy using the following endpoint:\r\n\r\n```\r\nmesg-core service deploy https://github.com/mesg-foundation/service-ethereum --env PROVIDER_ENDPOINT=https://kovan.infura.io/v3/PROJECT_ID --env BLOCK_CONFIRMATIONS=0\r\n```\r\n\r\nOn this testnet, the number of confirmation is set to 0 because of the Proof Of Authority consensus used by this network.\r\n\r\n\r\n## RSK Mainnet\r\n\r\nTo use the RSK mainnet, deploy using the following endpoint:\r\n\r\n```\r\nmesg-core service deploy https://github.com/mesg-foundation/service-ethereum --env PROVIDER_ENDPOINT=https://public-node.rsk.co --env BLOCK_CONFIRMATIONS=0\r\n```\r\n\r\n## RSK Testnet\r\n\r\nTo use the RSK testnet, deploy using the following endpoint:\r\n\r\n```\r\nmesg-core service deploy https://github.com/mesg-foundation/service-ethereum --env PROVIDER_ENDPOINT=https://public-node.testnet.rsk.co --env BLOCK_CONFIRMATIONS=0\r\n```\r\n\r\n## Custom\r\n\r\nYou can set any provider, block confirmations, default gas limit and polling time to match your specific need. Here is a example with those 3 configs:\r\n\r\n```\r\nmesg-core service deploy https://github.com/mesg-foundation/service-ethereum --env PROVIDER_ENDPOINT=AN_ETHEREUM_NODE --env BLOCK_CONFIRMATIONS=1 --env DEFAULT_GAS_LIMIT=1000000 --env POLLING_TIME=1000\r\n```\r\n\r\n# Definitions\r\n\r\n# Events\r\n\r\n## Block\r\n\r\nEvent key: `block`\r\n\r\n\r\n\r\n| **Key** | **Type** | **Description** |\r\n| --- | --- | --- |\r\n| **difficulty** | `String` |  |\r\n| **extraData** | `String` |  |\r\n| **gasLimit** | `Number` |  |\r\n| **gasUsed** | `Number` |  |\r\n| **hash** | `String` |  |\r\n| **logsBloom** | `String` |  |\r\n| **miner** | `String` |  |\r\n| **number** | `Number` |  |\r\n| **parentHash** | `String` |  |\r\n| **sha3Uncles** | `String` |  |\r\n| **size** | `Number` |  |\r\n| **stateRoot** | `String` |  |\r\n| **timestamp** | `Number` |  |\r\n\r\n## Log\r\n\r\nEvent key: `log`\r\n\r\n\r\n\r\n| **Key** | **Type** | **Description** |\r\n| --- | --- | --- |\r\n| **address** | `String` |  |\r\n| **blockHash** | `String` |  |\r\n| **blockNumber** | `Number` |  |\r\n| **data** | `String` |  |\r\n| **logIndex** | `Number` |  |\r\n| **topics** | `Any` |  |\r\n| **transactionHash** | `String` |  |\r\n| **transactionIndex** | `Number` |  |\r\n\r\n## Transaction\r\n\r\nEvent key: `transaction`\r\n\r\n\r\n\r\n| **Key** | **Type** | **Description** |\r\n| --- | --- | --- |\r\n| **blockHash** | `String` |  |\r\n| **blockNumber** | `Number` |  |\r\n| **from** | `String` |  |\r\n| **gas** | `Number` |  |\r\n| **gasPrice** | `String` |  |\r\n| **gasUsed** | `Number` |  |\r\n| **input** | `String` |  |\r\n| **status** | `Boolean` |  |\r\n| **to** | `String` |  |\r\n| **transactionHash** | `String` |  |\r\n| **transactionIndex** | `Number` |  |\r\n| **value** | `String` |  |\r\n\r\n\r\n# Tasks\r\n\r\n## Call a Smart Contract Method\r\n\r\nTask key: `callSmartContractMethod`\r\n\r\nThis task call a &#39;constant&#39; method on any Smart Contract. It does not require fees.\r\n\r\n### Inputs\r\n\r\n| **Key** | **Type** | **Description** |\r\n| --- | --- | --- |\r\n| **contractAddress** | `String` | The address of the contract |\r\n| **inputs** | `Any` | The inputs to use during the execution of the method. Pass an Object with parameter&#39;s name as key and parameter&#39;s value as value. |\r\n| **methodAbi** | `Any` | The ABI of the method to execute. Only pass the ABI of the method and NOT all the Smart Contract&#39;s ABI. |\r\n\r\n\r\n### Outputs\r\n\r\n##### error\r\n\r\nOutput key: `error`\r\n\r\nOutput when an error occurs\r\n\r\n| **Key** | **Type** | **Description** |\r\n| --- | --- | --- |\r\n| **message** | `String` | The error message |\r\n\r\n##### success\r\n\r\nOutput key: `success`\r\n\r\nOutput when the task executes successfully\r\n\r\n| **Key** | **Type** | **Description** |\r\n| --- | --- | --- |\r\n| **outputs** | `Any` |  |\r\n\r\n\r\n\r\n\r\n## Decode Log\r\n\r\nTask key: `decodeLog`\r\n\r\n\r\n\r\n### Inputs\r\n\r\n| **Key** | **Type** | **Description** |\r\n| --- | --- | --- |\r\n| **abi** | `Any` |  |\r\n| **address** | `String` |  |\r\n| **blockHash** | `String` |  |\r\n| **blockNumber** | `Number` |  |\r\n| **data** | `String` |  |\r\n| **logIndex** | `Number` |  |\r\n| **topics** | `Any` |  |\r\n| **transactionHash** | `String` |  |\r\n| **transactionIndex** | `Number` |  |\r\n\r\n\r\n### Outputs\r\n\r\n##### error\r\n\r\nOutput key: `error`\r\n\r\nOutput when an error occurs\r\n\r\n| **Key** | **Type** | **Description** |\r\n| --- | --- | --- |\r\n| **message** | `String` | The error message |\r\n\r\n##### success\r\n\r\nOutput key: `success`\r\n\r\n\r\n\r\n| **Key** | **Type** | **Description** |\r\n| --- | --- | --- |\r\n| **address** | `String` |  |\r\n| **blockHash** | `String` |  |\r\n| **blockNumber** | `Number` |  |\r\n| **data** | `String` |  |\r\n| **decodedData** | `Any` |  |\r\n| **logIndex** | `Number` |  |\r\n| **topics** | `Any` |  |\r\n| **transactionHash** | `String` |  |\r\n| **transactionIndex** | `Number` |  |\r\n\r\n\r\n\r\n\r\n## Execute a Smart Contract Method\r\n\r\nTask key: `executeSmartContractMethod`\r\n\r\nThis task executes a method on any Smart Contract\r\n\r\n### Inputs\r\n\r\n| **Key** | **Type** | **Description** |\r\n| --- | --- | --- |\r\n| **contractAddress** | `String` | The address of the contract |\r\n| **gasLimit** | `Number` | The maximum gas provided for this transaction |\r\n| **gasPrice** | `String` | The gas price in wei to use for this transaction |\r\n| **inputs** | `Any` | The inputs to use during the execution of the method. Pass an Object with parameter&#39;s name as key and parameter&#39;s value as value. |\r\n| **methodAbi** | `Any` | The ABI of the method to execute. Only pass the ABI of the method and NOT all the Smart Contract&#39;s ABI. |\r\n| **privateKey** | `String` | The private key to sign the transaction |\r\n| **value** | `String` |  |\r\n\r\n\r\n### Outputs\r\n\r\n##### error\r\n\r\nOutput key: `error`\r\n\r\nOutput when an error occurs\r\n\r\n| **Key** | **Type** | **Description** |\r\n| --- | --- | --- |\r\n| **message** | `String` | The error message |\r\n\r\n##### success\r\n\r\nOutput key: `success`\r\n\r\nOutput when the task executes successfully\r\n\r\n| **Key** | **Type** | **Description** |\r\n| --- | --- | --- |\r\n| **transactionHash** | `String` | Hash of the transaction |\r\n\r\n\r\n\r\n\r\n"
  }
}